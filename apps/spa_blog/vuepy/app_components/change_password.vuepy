v-def templ:
    XModal(
        :can_cancel = 'true',
        max_width = '300px',
        @close = "$emit('close')"
    ):
        template(v-slot:title):
            'Change Password'
        template(v-slot:body):
            XForm(
                :fields = 'fields',
                @action = 'on_action',
                :validation = 'validation',
            ):

v-pyj:
@{
from asset.rs_vue import V_collector,  RS_vue
from asset.utils import asyncer
from asset.validators import string
from models import auth_fields

vc = V_collector()

@vc.component()
class XChangePassword(RS_vue):
    def __init__(self):
        self.template = templ
        self.map_store = {
            'err' : '/auth.http_error',
            'flash': 'flash~',
            'change_password': '/auth.change_password*'
        }
    def data(self):
        fields = [
            {
                name: 'old_password',
                label: 'Current Password',
                type: 'password',
                validator: string([8])
            },
            {
                name: 'new_password',
                label: 'New Password',
                type: 'password',
                validator: auth_fields.password.validator
            }
        ]
        return {
            fields,
            in_process: False,
            validation: None

        }

    @asyncer
    def on_action(self, act_obj, form_values):
        if self.in_process:
            return

        self.in_process = True
        err = None
        try:
            yield self.change_password(form_values)
            self.validation = None
            self.flash('Done!', 'ok')
            self.$modal.close('ui')
        except as err:
            if err.errors:
                validation = {}
                for f in err.errors:
                    self.validation = err.errors
                err = None
        self.in_process = False
        if err:
            raise err

def make():
    return XChangePassword()

}@
