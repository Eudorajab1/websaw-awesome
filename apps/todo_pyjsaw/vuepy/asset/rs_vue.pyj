# ----- log -----------
def print_log(*args):
    if window.ENV and window.ENV.debug:
        console.log.apply(console, arguments)

# ---- store utils -------------
def find_recursive(obj, cb, max_iter ):
    max_iter = max_iter or 1000
    i = 0
    ctx = {}
    ret  = cb.call(ctx, obj, i)
    while !ret[1] and i < max_iter:
        ret  = cb.call(ctx, ret[0], i)
        i+=1
    if i >= max_iter:
        raise Error('max iteration exceeded')
    return ret[0]

def make_prop_chain(path, prefix, splitter):
    prefix = prefix or ''
    splitter = splitter or '.'
    return path.split(splitter).filter(def(v): return v;).reduce(def(p,v): return p + prefix + '.' +  v;, '')

def make_prop_getter(prop_chain):
    me = make_prop_getter
    if not (ret = me._memo[prop_chain]):
        #ret = me._memo[prop_chain] = eval('(obj)=>obj' + prop_chain)
        ret = me._memo[prop_chain] = Function('obj', '{return obj' + prop_chain + '}')
    return ret
make_prop_getter._memo = {}

def split_modgetter_rest(store, path):
    self = store
    mod_rest = /(^(\/[\w$]+)+)((\.[^.]+)+)$/.exec(path)
    if not mod_rest:
        return [def(): return self;, path]
    else:
        modgetter =  make_prop_getter(make_prop_chain(mod_rest[1][1:], '.modules', '/'))
    return [modgetter, mod_rest[3][1:]]

# ---- /store utils -------------

def unpack_name_fun_opt(f_reg_as):
    def unpacker(reg_as, name_fun_opt, opt):
        if not name_fun_opt:
            raise Error('Attempt to call V_Collector @decorator with empty `()`')

        self = this
        arg1type = type(name_fun_opt)
        # Simple call:  @decor
        if arg1type.startsWith('Fun'):
            name = name_fun_opt.__name__ or name_fun_opt.name
            return f_reg_as.call(self, reg_as, name, name_fun_opt)
        # Factory call: @decor('name') or  @decor('name', {}) or @decor({})
        else:
            return def(f):
                nonlocal opt
                # @decor('name') or  @decor('name', {})
                # if name_fun_opt is String then use it as name
                if arg1type.startsWith('Str'):
                    name = name_fun_opt
                    if opt:
                        opt.handler = f
                    else:
                        opt = f
                # @decor({})
                else:
                    opt = name_fun_opt
                    name = f.__name__ or f.name
                    opt.handler = f
                return f_reg_as.call(self, reg_as, name, opt)
    return unpacker

class V_collector:
    def __init__(self):
        self._methods = None
        self._computed = None
        self._watch = None
        self._filters = None
        self._directives = None

        self._getters = None
        self._mutations = None
        self._actions = None

    @unpack_name_fun_opt
    def _reg_as(self, reg_as, name, fun_opt):
        print_log('reg '+ reg_as + ' ' + name + ' self: ', self)
        if not self[reg_as]:
            self[reg_as] = {}
        self[reg_as][name] = fun_opt
        return fun_opt.handler ? fun_opt.handler : fun_opt

    def meth(self, name_or_fun):       return self._reg_as('_methods', name_or_fun)
    def computed(self, name_or_fun):   return self._reg_as('_computed', name_or_fun)
    def filter(self, name_or_fun):     return self._reg_as('_filters', name_or_fun)
    def directive(self, name_or_fun):  return self._reg_as('_directives', name_or_fun)
    def watch(self, name_or_fun, opt): return self._reg_as('_watch', name_or_fun, opt)

    def getter(self, name_or_fun): return self._reg_as('_getters', name_or_fun)
    def mutation(self, name_or_fun): return self._reg_as('_mutations', name_or_fun)
    def action(self, name_or_fun): return self._reg_as('_actions', name_or_fun)

class RS_vue:
    def __init__(self, v_collector):
        self.props = {}
        self.data = self._init_data
        self.delimiters = ['{{', '}}']
        if v_collector:
            self.methods = v_collector._methods
            self.computed = v_collector._computed
            self.directives = v_collector._directives
            self.filters = v_collector._filters
            self.watch = v_collector._watch
            for it in [['~', '_mutations'], ['*', '_actions']]:
                sym, _name = it
                if v_collector[_name]:
                    if not self.map_store:
                        self.map_store = {}
                    for k in v_collector[_name]:
                        self.map_store[k] = sym
                        self.methods[k] = v_collector[_name][k]

        self_keys = Object.keys(self)
        for v_spec in [ 'beforeCreate','created',
                        'beforeMount', 'mounted',
                        'beforeUpdate', 'updated',
                        'activated', 'deactivated',
                        'beforeDestroy', 'destroyed']:
            if !(v_spec in self_keys) and (tmp = self.__proto__[v_spec]):
                self[v_spec] = tmp

    def _init_data(self):
        raise ReferenceError('Not implemented')


class RS_state_api:
    def __init__(self, vc, vue, state, vm_opt):
        self.vue = vue
        self.raw_getters = vc._getters
        self.mutations = vc._mutations
        vm_opt = Object.assign({}, vm_opt or {}, {
            data : {state: state},
            computed : self.raw_getters,
            map_store: vc._map_store
        })
        self.vm = new vue(vm_opt)
        self.vm.rs_state_api = self
        self.state = self.vm.state
        self.getters = {}
        # small hack to extract getters
        get_prop = Object.getOwnPropertyDescriptor
        if self.raw_getters:
            for getter_name in self.raw_getters:
                self.getters[getter_name] = \
                    get_prop(self.vm, getter_name).get

    def commit(self, mutation, *payload):
        print_log('mutation: ', mutation)
        print_log('\tpayload: ',  payload)
        if (h = self.mutations[mutation]):
            return h.apply(self, payload)
        else:
            raise Error('unknown mutation: ' + mutation)

    def $del(self):
        self.vm.$delete.apply(self.vm, arguments)

    def $set(self):
        self.vm.$set.apply(self.vm, arguments)


    def check_path(self, path):
        path = path.split('\.')
        if path.length == 1:
            return self.state.hasOwnProperty(path[0])
        try:
            last_prnt = path[:-1].reduce(def(s, name): return s[name];, self.state)
        except TypeError:
            return False
        return last_prnt.hasOwnProperty(path[-1])

    def _get(self, path):
        return  make_prop_getter(make_prop_chain(path))(self.vm.state)

    def get(self, path):
        if self.getters.hasOwnProperty(path):
            return self.vm[path]
        else:
            return self._get(path)

    def set_getter(self, h, as_name):
        as_name = as_name or h.__name__ or h.name
        if not (as_name and type(as_name).startsWith('Str') ):
            raise Error('can`t get the name of new getter: ' + h)
        if as_name == 'state':
            raise Error('`state` is bad name for new getter: ' + h)
        v = new self.vue({computed: {(as_name): def(): return h.call(self.vm);}})
        getter = Object.getOwnPropertyDescriptor(v, as_name)
        Object.defineProperty(self.vm, as_name, getter)
        self.getters[as_name] = getter.get

    def set_mutation(self, h, as_name):
        as_name = as_name or h.__name__ or h.name
        if not (as_name and type(as_name).startsWith('Str') ):
            raise Error('can`t get the name of new mutation: ' + h)
        if as_name in self.mutations:
            pass
        elif self.hasOwnProperty(as_name):
            raise Error('Bad mutation name: ' + as_name)
        self.mutations[as_name] = self[as_name] = h


class RS_store:
    def __init__(self):
        if not self.vue:
            raise ReferenceError('You should first call Vue.use(Your_Store)')
        self.dispatch_bound = def(): return self.dispatch.apply(self, arguments);
        self.commit_bound   = def(): return self.commit.apply(self, arguments);

        self.$bus = {
            $on: (def(e, cb):  return self.$on(e, cb);),
            $off: (def(e, cb):  self.$off(e, cb);),
            $emit: (def(*args):  self.$emit(*args);)
        }
    def mount_module(self, mod_obj, as_name):
        as_name = as_name or mod_obj.__name__ or mod_obj.constructor and mod_obj.constructor.name
        if not ( as_name and type(as_name).startsWith('Str') ):
            raise Error('can`t get the name of module: ' + mod_obj)
        if self.state_api.state.hasOwnProperty(as_name):
            raise Error('can`t mount module under name `' + as_name + '`,  name already exists')
        if not self.modules:
            self.modules = {}
        self.modules[as_name] = mod_obj
        self.state_api.$set(self.state_api.state, as_name, mod_obj.state_api.state)

    def replace_state(self, new_state):
        _new_state = {}
        for k in new_state:
            it = new_state[k]
            if self.modules and (mod = self.modules[k]):
                it = mod.replace_state(it)
            _new_state[k] = it
        self.state_api.$set(self.state_api.vm, 'state', _new_state)
        self.state_api.state = self.state_api.vm.state
        return self.state_api.state

    def _get(self, path):
        '''
        looks for pure state only
        getters are ignored
        '''
        mod, rest = split_modgetter_rest(self, path)
        return mod(self).state_api._get(rest)

    def get(self, path):
        '''
        returns getter-value or state
        looks for getter first
        '''
        mod, rest = split_modgetter_rest(self, path)
        return mod(self).state_api.get(rest)

    def getter_factory(self, path):
        '''
        also accepts (modgetter, rest) as args
        '''
        argtype = type(path)
        if argtype[0] is 'S': # String - regular call as  f(path)
            modgetter, rest =  split_modgetter_rest(self, path)
        elif argtype[0] is 'F': # Function - call as f(modgetter, rest)
            modgetter = arguments[0]
            rest = arguments[1]
        else:
            raise Error('Wrong args: ', arguments)
        getter = make_prop_getter(make_prop_chain(rest))
        return def():
            mod = modgetter(self)
            if mod.state_api.getters.hasOwnProperty(rest):
                return mod.state_api.vm[rest];
            else:
                return getter(mod.state_api.vm.state)

    def handler_factory(self, path):
        modgetter, rest =  split_modgetter_rest(self, path)
        if rest.endsWith('~'):
            mutation = rest[:-1]
            return def(*args): modgetter(self).state_api.commit(mutation, *args);
        elif rest.endsWith('*'):
            action = rest[:-1]
            #return def(*args): modgetter(self)[action](*args);
            return def(*args): return modgetter(self)._dispatch(action, *args);
        else:
            return self.getter_factory(modgetter, rest)

    def $on(self, e, cb):
        self.state_api.vm.$on(e, cb)
        return def(): self.$off(e, cb);

    def $off(self, e, cb):
        self.state_api.vm.$off(e, cb)

    def $emit(self):
        self.state_api.vm.$emit.apply(self.state_api.vm, arguments)

    def commit(self, mutation, *payload):
        modgetter, mutation =  split_modgetter_rest(self, mutation)
        return modgetter(self).state_api.commit(mutation, *payload)


    def _dispatch(self, action, *payload):
        print_log('action: ', action)
        print_log('\tpayload: ',  payload)
        if not self.actions or (not (action in self.actions)):
            raise Error('unknown action: ' + action)
        p = self[action].apply(self, payload)
        if not isinstance(p, Promise):
            p = Promise.resolve(p)
        return p

    def dispatch(self, action, *payload):
        modgetter, action =  split_modgetter_rest(self, action)
        mod = modgetter(self)
        return mod._dispatch(action, *payload)

    def set_action(self, h, as_name):
        as_name = as_name or h.__name__ or h.name
        if not (as_name and type(as_name).startsWith('Str') ):
            raise Error('can`t get the name of new action: ' + h)
        if as_name in self.actions:
            pass
        elif self.hasOwnProperty(as_name):
            raise Error('Bad action name: ' + as_name)
        self.actions[as_name] = self[as_name] = h

    @staticmethod
    def before_create():

        map_store = 'map_store'
        is_mutation_re  =  /(.+)~$/
        is_action_re  =  /(.+)\*$/

        $opts = this.$options
        #!don't replace with map_store in ...
        $map_opts = $opts[map_store] or $opts.propsData and $opts.propsData[map_store]
        if not $map_opts:
            return

        self = $opts.store or (def(vm):
            tmp = find_recursive(vm, def(o): return [o.$parent, !o.$parent or o.$parent.$options.store];)
            store = tmp.$options.store
            if not store:
                raise ReferenceError('store not found')
            return store
        )(this)

        injectors = {
            '*': (def(f): return def(): f.call(this, self.dispatch_bound, *arguments);),
            '~': (def(f): return def(): f.call(this, self.commit_bound, *arguments);)
        }

        for opt in ['methods', 'computed']:
            # make clone - important!
            $opts[opt] = Object.assign({}, $opts[opt])

        if Array.isArray($map_opts):
            $map_opts = { k:k for k in $map_opts}

        for map_to in $map_opts:
            map_from = $map_opts[map_to]
            #if map_from is '$bus':
            #    this[map_to] = self.$bus
            if map_from in ['*','~']:
                if not $opts.methods[map_to]:
                    raise ReferenceError('Can`t map ' + map_from +' to non-existing method: ' + map_to)
                $opts.methods[map_to] = injectors[map_from]($opts.methods[map_to])
            elif type(map_from).startsWith('Fun') and (map_to_split = /(.+?)(\*|~)$/.exec(map_to)):
                map_to_meth = map_to_split[1]
                store_meth = map_to_split[2]
                $opts.methods[map_to_meth] = injectors[store_meth](map_from)
            else:
                modgetter, rest = split_modgetter_rest(self, map_from)
                store_mod = modgetter(self)
                if rest is '$bus':
                    $opts['computed'][map_to] = def(): return modgetter(self).$bus;
                    continue
                handler = self.handler_factory(map_from)
                if (action = is_action_re.exec(rest)):
                    action = action[1]
                    if not (action in store_mod.actions):
                        raise ReferenceError('unknown action in `map_store`: ' + map_from)
                    if $opts['methods'][map_to]:
                        $opts['methods'][map_to] = \
                            (def(h, store_h):
                                 return (def(): return h.call(this, store_h, *arguments);)
                            )($opts['methods'][map_to], handler)
                    else:
                        $opts['methods'][map_to] = handler
                elif (mutation = is_mutation_re.exec(rest)):
                    mutation = mutation[1]
                    if not (mutation in store_mod.state_api.mutations):
                        raise ReferenceError('unknown mutation in `map_store`: ' + map_from)
                    if $opts['methods'][map_to]:
                        $opts['methods'][map_to] = \
                            (def(h, store_h):
                                 return (def(): return h.call(this, store_h, *arguments);)
                            )($opts['methods'][map_to], handler)
                    else:
                        $opts['methods'][map_to] = handler
                elif rest in store_mod.state_api.getters or store_mod.state_api.check_path(rest):
                    $opts['computed'][map_to] = handler
                else:
                    raise ReferenceError('Can`t map `' + map_from + '` to `' + map_to +  '`')

    @staticmethod
    def beforeDestroy():
        self = this
        if self.bus_cleanup and self.bus_cleanup.length:
            print_log('bus_cleanup', self.bus_cleanup)
            self.bus_cleanup.forEach(def(off): off();)

    @staticmethod
    def install(Vue, opt):
        RS_store.prototype.vue = Vue
        Vue.mixin({ beforeCreate: RS_store.before_create, beforeDestroy:RS_store.beforeDestroy })

